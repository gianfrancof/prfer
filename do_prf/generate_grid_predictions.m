function [predictions, parameters] = generate_grid_predictions(parameters, apt, stimulus_space, model_fun)
%generate_grid_predictions computes predictions for a set of receptive
%field parameters. In addition, it checks and removes parameters
%generating constant predictions (i.e., with variance ~ 0).
%
%generate_grid_predictions
% input arguments:
%
%   parameters: cell array contaning the set of parameters generated by the
%                create_grid function 
%                 
%   apt: a 3D matrix of hrf-convolved stimulus apertures
%
%   stimulus_space: cell array containg the stimulus space
%
%   model_fun: function handle specifing the receptive field (i.e., tuning)
%              function
%
% output:
%   
%   predictions: 2D matrix of predictions for each set of parameters (columns)
%                and time point (rows)
%   
%   parameters: cell array containing the parameters that generated each
%               column of the prediction matrix
%
%This software is released under MIT license (see LICENCE file).
%
% Version: 0.1.1
% Date: Sep 2025
% Authors: Valeria Centanino, Gianfranco Fortunato
% International School for Advanced Studies (SISSA), Trieste, IT

% Generate predictions using broadcasting
ip_parameters = cellfun(@(x) ipermute(x, [4,3,2,1]),parameters,'UniformOutput',false);
rf = single(model_fun(stimulus_space{:},ip_parameters{:}));
rf = repmat(rf,1,1,size(apt,3),1);
predictions = rf.*repmat(apt,1,1,1,size(rf,4));
predictions = squeeze(sum(sum(predictions)));

% Prune predictions with negligible variation
predictions_std = std(predictions,[],1);
pruning_mask = all(predictions_std < eps,1);
parameters = cellfun(@(x) x(~pruning_mask),parameters,'UniformOutput',false);
predictions = predictions(:,~pruning_mask);


% Verbose version of lines 36-39 :)
%
% predictions = nan(size(apt,3),length(parameters{1}));
% for par = 1:length(parameters{1})
%     rf = single(model_fun(stimulus_space{1},stimulus_space{2},...
%                    parameters{1}(par),parameters{2}(par),parameters{3}(par)));
%     predictions(:,par) = squeeze(sum(sum(apt.*rf)));
% end